package com.myweb.www.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/board/*")
@RequiredArgsConstructor
@Controller
public class BoardController {

	private final BoardService bsv;
	
	private final FileHandler fh;

	@GetMapping("/register")
	public void register() {

	}

	@PostMapping("/register")
	public String insert(BoardVO bvo, @RequestParam(name="files",required = false)MultipartFile[] files) {
		log.info(bvo.toString());
		
		List<FileVO> flist = null;
		
		if(files[0].getSize() > 0)
		{
			flist = fh.uploadFiles(files);
		}
		
		BoardDTO bdto = new BoardDTO(bvo,flist);
		int isOk = bsv.insert(bdto);
		
		return "index";
	}

	@GetMapping("/list")
	public String list(Model m,PagingVO pgvo) {
		log.info(">>>> pagingVO >> {} ",pgvo);
		List<BoardVO> list= bsv.getList(pgvo);
		int totalCount = bsv.getTotalCount(pgvo);
		
		PagingHandler ph = new PagingHandler(pgvo, totalCount);
		log.info(list.toString());
		m.addAttribute("list",list);
		m.addAttribute("ph",ph);
		return "/board/list";
	}
	
	@PostMapping("/modify")
	public String modify(BoardVO bvo) {
		log.info("MODIFY" + bvo.toString());
		int isOk = bsv.modify(bvo);
		return "redirect:/board/detail?bno="+bvo.getBno();
	}
	
	@GetMapping("/detail")
	public void detail(Model m, @RequestParam("bno")long bno) {
		BoardDTO bdto = bsv.getBvo(bno);
		m.addAttribute("bdto",bdto);
		bsv.read(bno);
	}
	
	@GetMapping("/modify")
	public void modify(Model m, @RequestParam("bno")long bno) {
		BoardDTO bdto = bsv.getBvo(bno);
		m.addAttribute("bdto",bdto);
	}
	
	@GetMapping("/remove")
	public String remove(@RequestParam("bno")long bno) {
		
		log.info("Delete " + bno);
		int isOk = bsv.remove(bno);
		log.info("Delete Success");
		return "redirect:/board/list";
	}
	
	@DeleteMapping("/file/{uuid}")
	public ResponseEntity<String> removeFile(@PathVariable("uuid") String uuid){
		log.info(uuid);
		int isOk = bsv.removeFile(uuid);
		return isOk > 0 ? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
